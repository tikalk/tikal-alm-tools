<project name="scmMigration" basedir=".">

    <!-- global definitions -->    

    <property name="cvs2svn.tool.path" value="${cvs2svn.tool.folder}/cvs2svn"/>
	<property name="scm-migration.work.folder" value="${temp.root.folder}/${repository.name}"/>

<scriptdef name="techo" language="javascript">
 <attribute name="message"/>

<![CDATA[
function getTimeStamp() {
    var now = new Date();
    return ((now.getDate()) + '/' +
             (now.getMonth() + 1) + '/' +
             now.getFullYear() + " " +
             now.getHours() + ':' +
             ((now.getMinutes() < 10)
                 ? ("0" + now.getMinutes())
                 : (now.getMinutes())) + ':' +
             ((now.getSeconds() < 10)
                 ? ("0" + now.getSeconds())
                 : (now.getSeconds())));
}
    tstamp = getTimeStamp();
    self.log(attributes.get("message") +" ["+tstamp+"]");
]]>
</scriptdef>
    
	<!-- conditional properties -->
	
	<condition property="cvs2svn.additional.arguments" value="">
	    <not>
	        <isset property="cvs2svn.additional.arguments"/>
	    </not>
	</condition>
	<condition property="svn2git.additional.arguments" value="">
	    <not>
	        <isset property="svn2git.additional.arguments"/>
	    </not>
	</condition>
	<condition property="gitignore.generate" value="true">
	    <not>
	        <isset property="gitignore.file.path"/>
	    </not>
	</condition>
	<condition property="gitignore.file.path" value="${temp.root.folder}/template.gitignore">
	    <not>
	        <isset property="gitignore.file.path"/>
	    </not>
	</condition>
	<condition property="push.to.remote" value="true">
	    <not>
	        <equals arg1="${git.remote.uri}" arg2=""/>
	    </not>
	</condition>
				
	<!-- general targets -->    
    
   	<target name="scm-migration:general:run-command">
    	<techo taskname="scm-migration" message="[start] run command: ${run-command.executable} ${run-command.command.line}"/>
    	<exec taskname="${run-command.task-name}" executable="${run-command.executable}" dir="${run-command.dir}" failonerror="true">
    	    <arg line="${run-command.command.line}"/>
    	</exec>
    	<techo taskname="scm-migration" message="[end] run command"/>
   	</target> 
   	
   	<target name="scm-migration:general:run-command-and-output-to-file-output" if="exec.failed">
   	    <loadfile srcfile="${output.file}" property="output.file.content"/>
   	    <loadfile srcfile="${error.file}" property="error.file.content"/>
   	    <echo message="${output.file.content}"/>
   	    <fail message="${error.file.content}"/>
   	</target> 
   	
   	<target name="scm-migration:general:run-command-and-output-to-file">
    	<techo taskname="scm-migration" message="[start] run command and output to file (${run-command.dir.output.file}): ${run-command.executable} ${run-command.command.line}"/>
    	<exec taskname="${run-command.task-name}" executable="${run-command.executable}" dir="${run-command.dir}" output="${run-command.dir.output.file}" error="${run-command.dir.error.file}" resultproperty="exec.result">
    	    <arg line="${run-command.command.line}"/>
    	</exec>
    	<condition property="exec.failed">
    	    <not>
    	        <equals arg1="${exec.result}" arg2="0"/>
    	    </not>
    	</condition>
    	<antcall target="scm-migration:general:run-command-and-output-to-file-output">
    		<param name="output.file" value="${run-command.dir.output.file}"/>
    		<param name="error.file" value="${run-command.dir.error.file}"/>
    	</antcall>
    	<techo taskname="scm-migration" message="[end] run command"/>
   	</target> 
   	
  	<!-- CVS2GIT migration targets -->
   
   	<target name="scm-migration:cvs2git:main">
    	<techo taskname="scm-migration" message="[start] CVS2GIT main"/>
   	    <antcall target="scm-migration:cvs2git:validations"/>  
   	    <antcall target="scm-migration:init"/>  
    	<antcall target="scm-migration:cvs2svn"/>  
    	<antcall target="scm-migration:svn2git">
    	    <param name="svn.repository.url" value="file://${scm-migration.work.folder}/svn ${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<antcall target="scm-migration:git-push-flow"/>  
    	<techo taskname="scm-migration" message="[end] CVS2GIT main"/>
   	</target> 
   
   	<target name="scm-migration:cvs2git:validations">
    	<techo taskname="scm-migration"  message="[start] validations"/>
    	<fail message="cvs2svn tool folder (cvs2svn.tool.folder) wasn't defined" unless="cvs2svn.tool.folder"/>
    	<fail message="Repository name (property name: repository.name) wasn't defined" unless="repository.name"/>
    	<fail message="Path to authors file (property name: authors.file.path) wasn't defined" unless="authors.file.path"/>
    	<fail message="Path to CVS root folder (property name: cvs.repository.root) wasn't defined" unless="cvs.repository.root"/>
    	<fail message="Remote GIT URL (property name: git.remote.uri) wasn't defined" unless="git.remote.uri"/>
    	<fail message="Temporary work folder (temp.root.folder) wasn't defined" unless="temp.root.folder"/>
    	<fail message="Source .gitignore file path (gitignore.file.path) wasn't defined" unless="gitignore.file.path"/>
    			
    	<condition property="cvs2svn.tool.path.exist">
    	    <available file="${cvs2svn.tool.path}"/>
    	</condition>
    	<fail message="cvs2svn command (${cvs2svn.tool.path}) not exists (maybe you should build it first?)" unless="cvs2svn.tool.path.exist"/>
    	<condition property="authors.file.path.exist">
    	    <available file="${authors.file.path}"/>
    	</condition>
    	<fail message="Authors file doesn't exists (${authors.file.path.exist})" unless="authors.file.path.exist"/>
    	<condition property="cvs.repository.root.exist">
    	    <available file="${cvs.repository.root}"/>
    	</condition>
    	<fail message="CVS repository root doesn't exists (${cvs.repository.root})" unless="cvs.repository.root.exist"/>
    	<condition property="temp.root.folder.exist">
    	    <available file="${temp.root.folder}"/>
    	</condition>
    	<fail message="Temporary working folder doesn't exists (${temp.root.folder})" unless="temp.root.folder.exist"/>
      	<condition property="gitignore.file.path.exist">
    	    <available file="${gitignore.file.path}"/>
    	</condition>
    	<fail message="Template .gitignore file doesn't  exists (${gitignore.file.path})" unless="gitignore.file.path.exist"/>
 		<techo taskname="scm-migration" message="[end] validations"/>
   	</target> 

   	<target name="scm-migration:init">
    	<techo taskname="scm-migration" message="[start] init"/>
    	<delete dir="${scm-migration.work.folder}"/>
    	<mkdir dir="${scm-migration.work.folder}"/>
    	<techo taskname="scm-migration" message="[end] init"/>
  	</target> 
   
   	<target name="scm-migration:cvs2svn">
    	<techo taskname="scm-migration" message="[start] cvs2svn"/>
    	<property name="cvs2svn.command.arguments" value="--username=scm-migration --fallback-encoding=utf8 ${cvs2svn.additional.arguments} --svnrepos ${scm-migration.work.folder}/svn ${cvs.repository.root}/${repository.name}"/>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:cvs2svn"/>
    	    <param name="run-command.executable" value="${cvs2svn.tool.path}"/>
    	    <param name="run-command.command.line" value="${cvs2svn.command.arguments}"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}"/>
    	</antcall>
    	<techo taskname="scm-migration" message="[end] cvs2svn"/>
   	</target> 

   	<!-- SVN2BAREGIT targets -->
   	
   	<target name="scm-migration:svn2baregit:main">
    	<techo taskname="scm-migration" message="[start] SVN2BAREGIT main"/>
   	    <antcall target="scm-migration:svn2baregit:validations"/>  
   	    <antcall target="scm-migration:init"/>  
    	<antcall target="scm-migration:svn2baregit:init"/>
    	<antcall target="scm-migration:svn2baregit:svn-trunk2git-master"/>
     	<antcall target="scm-migration:svn2baregit:migrate-branches"/>
		<antcall target="scm-migration:svn2baregit:migrate-tags"/>
    	<antcall target="scm-migration:svn2baregit:clearance"/>
    	<antcall target="scm-migration:aggressive-gc"/>  
   	    <antcall target="scm-migration:git-push"/>
    	<techo taskname="scm-migration" message="[end] SVN2BAREGIT main"/>
   	</target> 
   
   	<target name="scm-migration:svn2baregit:validations">
    	<techo taskname="scm-migration"  message="[start] validations"/>
    	<fail message="Repository name (property name: repository.name) wasn't defined" unless="repository.name"/>
    	<fail message="Remote GIT URL (property name: git.remote.uri) wasn't defined" unless="git.remote.uri"/>
    	<fail message="Temporary work folder (temp.root.folder) wasn't defined" unless="temp.root.folder"/>
    	<fail message="SVN repository URL (svn.repository.url) wasn't defined" unless="svn.repository.url"/>
    	<condition property="temp.root.folder.exist">
    	    <available file="${temp.root.folder}"/>
    	</condition>
    	<fail message="Temporary working folder doesn't exists (${temp.root.folder})" unless="temp.root.folder.exist"/>
 		<techo taskname="scm-migration" message="[end] validations"/>
   	</target> 
   
   	<target name="scm-migration:svn2baregit:init">
    	<techo taskname="scm-migration"  message="[start] svn2baregit init"/>
  		<delete dir="${scm-migration.work.folder}/git/${repository.name}"/>
  		<mkdir dir="${scm-migration.work.folder}/git/${repository.name}"/>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2baregit:git-init"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="init"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<copy tofile="${scm-migration.work.folder}/git/${repository.name}/.gitignore" file="${gitignore.file.path}"/>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2baregit:add-gitignore"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="add --all"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2baregit:commit-gitignore"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="commit -a -m &quot;ScmMigration - add .gitignore&quot;"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2baregit:craete-template-branch"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="checkout -b templateScmMigration"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
 		<techo taskname="scm-migration" message="[end] svn2baregit init"/>
   	</target> 
   
   	<target name="scm-migration:svn2baregit:clearance">
    	<techo taskname="scm-migration"  message="[start] svn2baregit clearance"/>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2baregit:switch-to-master"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="checkout master"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2baregit:delete-template-branch"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="branch -D templateScmMigration"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<techo taskname="scm-migration" message="[end] svn2baregit clearance"/>
   	</target> 
   
   	<target name="scm-migration:svn2baregit:svn-trunk2git-master">
    	<techo taskname="scm-migration"  message="[start] svn-trunk2git-master"/>
    		<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2baregit:checkout-master"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="checkout master"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2baregit:svn-checkout-master"/>
    	    <param name="run-command.executable" value="svn"/>
    	    <param name="run-command.command.line" value="checkout -q ${svn.repository.url}/trunk ."/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<delete dir="${scm-migration.work.folder}/git/${repository.name}/.svn"/>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2baregit:fill-empty-folders"/>
    	    <param name="run-command.executable" value="${basedir}/fillEmptyFolders.sh"/>
    	    <param name="run-command.command.line" value=""/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2baregit:add-all-files"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="add --all"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2baregit:commit-all-files"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="commit -q -a -m &quot;ScmMigration - master commit&quot;"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
   		<techo taskname="scm-migration"  message="[end] svn-trunk2git-master"/>
   	</target> 

   	<target name="scm-migration:svn2baregit:migrate-branches">
    	<techo taskname="scm-migration"  message="[start] migrate branches"/>
    	<loadfile srcfile="${branches.list.file}" property="branches.list"/>
    	<property name="branches.path" value="branches"/>
    	
  <script language="javascript"> <![CDATA[

      // import statements
      // importPackage(java.io);
      importClass(java.io.File);
          	      
      var branchesList = project.getProperty("branches.list");
      self.setTaskName("scmMigration:svn2baregit:migrate-branch");
      var branches = branchesList.split("\n");
	  var numLines = branches.length;
	  var i;
      var currentSection;
      var sections = Array();
      var phrases = Array();

      // parse phrases
      for (i = 0; i < numLines; i++) {
         var currentBranch = branches[i].trim();
	      var antCall = project.createTask("antcall");
	      antCall.setTarget("scm-migration:svn2baregit:migrate-branch"); 
	      var branchParam = antCall.createParam(); 
	      branchParam.setName("current.branch"); 
	      branchParam.setValue(currentBranch); 
	      antCall.perform();
	  }
    ]]>
 </script>
    	
    	<techo taskname="scm-migration"  message="[end] migrate branches"/>
   	</target> 

   	<target name="scm-migration:svn2baregit:migrate-branch">
    	<techo taskname="scm-migration"  message="[start] migrate branch ${current.branch}"/>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2baregit:create-branch"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="checkout -b ${current.branch} templateScmMigration"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2baregit:svn-checkout-branch"/>
    	    <param name="run-command.executable" value="svn"/>
    	    <param name="run-command.command.line" value="checkout -q ${svn.repository.url}/${branches.path}/${current.branch} ."/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<delete dir="${scm-migration.work.folder}/git/${repository.name}/.svn"/>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2baregit:fill-empty-folders"/>
    	    <param name="run-command.executable" value="${basedir}/fillEmptyFolders.sh"/>
    	    <param name="run-command.command.line" value=""/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2baregit:add-all-files"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="add --all"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2baregit:commit-all-files"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="commit -q -a -m &quot;ScmMigration - ${current.branch} commit&quot;"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<techo taskname="scm-migration"  message="[end] migrate branch ${current.branch}"/>
   	</target> 
   	
   	<target name="scm-migration:svn2baregit:migrate-tags">
    	<techo taskname="scm-migration"  message="[start] migrate tags"/>
    	<loadfile srcfile="${tags.list.file}" property="tags.list"/>
    	<property name="tags.path" value="tags"/>
    	
  <script language="javascript"> <![CDATA[

      // import statements
      // importPackage(java.io);
      importClass(java.io.File);
          	      
      var tagsList = project.getProperty("tags.list");
      self.setTaskName("scmMigration:svn2baregit:migrate-tag");
      var tags = tagsList.split("\n");
	  var numLines = tags.length;
	  var i;
      var currentSection;
      var sections = Array();
      var phrases = Array();

      // parse phrases
      for (i = 0; i < numLines; i++) {
         var currentTag = tags[i].trim();
	      var antCall = project.createTask("antcall");
	      antCall.setTarget("scm-migration:svn2baregit:migrate-tag"); 
	      var tagParam = antCall.createParam(); 
	      tagParam.setName("current.tag"); 
	      tagParam.setValue(currentTag); 
	      antCall.perform();
	  }
    ]]>
 </script>
    	
    	<techo taskname="scm-migration"  message="[end] migrate tags"/>
   	</target> 

   	<target name="scm-migration:svn2baregit:migrate-tag">
    	<techo taskname="scm-migration"  message="[start] migrate tag ${current.tag}"/>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2baregit:create-branch-for-tag"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="checkout -b temp-${current.tag} templateScmMigration"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2baregit:svn-checkout-master"/>
    	    <param name="run-command.executable" value="svn"/>
    	    <param name="run-command.command.line" value="checkout -q ${svn.repository.url}/${tags.path}/${current.tag} ."/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<delete dir="${scm-migration.work.folder}/git/${repository.name}/.svn"/>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2baregit:fill-empty-folders"/>
    	    <param name="run-command.executable" value="${basedir}/fillEmptyFolders.sh"/>
    	    <param name="run-command.command.line" value=""/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2baregit:add-all-files"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="add --all"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2baregit:commit-all-files"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="commit -q -a -m &quot;ScmMigration - ${current.tag} commit&quot;"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2baregit:create-tag"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="tag -f ${current.tag}"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2baregit:switch-templatebranch"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="checkout templateScmMigration"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2baregit:delete-temp-branch"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="branch -D temp-${current.tag}"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<techo taskname="scm-migration"  message="[end] migrate tag ${current.branch}"/>
   	</target> 
   	
   	<!-- SVN2GIT targets -->
   	
   	<target name="scm-migration:svn2git:main">
    	<techo taskname="scm-migration" message="[start] SVN2GIT main"/>
   	    <antcall target="scm-migration:svn2git:validations"/>  
   	    <antcall target="scm-migration:init"/>  
    	<antcall target="scm-migration:svn2git"/>
    	<antcall target="scm-migration:svn2git:gitignore-file-generation"/>
   	    <antcall target="scm-migration:git-push-flow"/>  
    	<techo taskname="scm-migration" message="[end] SVN2GIT main"/>
   	</target> 
   
   	<target name="scm-migration:svn2git:validations">
    	<techo taskname="scm-migration"  message="[start] validations"/>
    	<fail message="Repository name (property name: repository.name) wasn't defined" unless="repository.name"/>
    	<fail message="Path to authors file (property name: authors.file.path) wasn't defined" unless="authors.file.path"/>
    	<fail message="Remote GIT URL (property name: git.remote.uri) wasn't defined" unless="git.remote.uri"/>
    	<fail message="Temporary work folder (temp.root.folder) wasn't defined" unless="temp.root.folder"/>
    	<fail message="SVN repository URL (svn.repository.url) wasn't defined" unless="svn.repository.url"/>
    			
    	<condition property="authors.file.path.exist">
    	    <available file="${authors.file.path}"/>
    	</condition>
    	<fail message="Authors file doesn't exists (${authors.file.path.exist})" unless="authors.file.path.exist"/>
    	<condition property="temp.root.folder.exist">
    	    <available file="${temp.root.folder}"/>
    	</condition>
    	<fail message="Temporary working folder doesn't exists (${temp.root.folder})" unless="temp.root.folder.exist"/>
 		<techo taskname="scm-migration" message="[end] validations"/>
   	</target> 

   	<target name="scm-migration:svn2git">
    	<techo taskname="scm-migration" message="[start] svn2git"/>
    	<property name="svn2git.command.arguments" value="svn clone -s -q --no-metadata --prefix=scmMigration/ --no-follow-parent ${svn2git.additional.arguments} --authors-file=${authors.file.path} ${svn.repository.url}"/>
    	<mkdir dir="${scm-migration.work.folder}/git"/>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2git"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="${svn2git.command.arguments}"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git"/>
    	</antcall>
    	<techo taskname="scm-migration" message="[end] svn2git"/>
   	</target>
   	
   	<target name="scm-migration:svn2git:gitignore-file-generation" if="gitignore.generate">
    	<techo taskname="scm-migration" message="[start] generate .gitignore file"/>
    	<antcall target="scm-migration:general:run-command-and-output-to-file">
    	    <param name="run-command.task-name" value="scm-migration:svn2git"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="svn show-ignore -i scmMigration/trunk"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	    <param name="run-command.dir.output.file" value="${gitignore.file.path}"/>
    	    <param name="run-command.dir.error.file" value="${gitignore.file.path}.err"/>
    	</antcall>
   	    <techo taskname="scm-migration" message="[end] generate .gitignore file"/>
   	</target> 
   
   	<!-- GIT push flow targets -->
   
   	<target name="scm-migration:git-push-flow">
   	    <antcall target="scm-migration:git-prepare-for-push"/>
    	<antcall target="scm-migration:aggressive-gc"/>  
   	    <antcall target="scm-migration:git-push"/>
   	</target> 
   
   	<target name="scm-migration:git-prepare-for-push">
    	<techo taskname="scm-migration" message="[start] git-prepare-for-push"/>

<script language="javascript"> <![CDATA[

      // import statements
      // importPackage(java.io);
      importClass(java.io.File);

	String.prototype.startsWith = function(s)
	{
   		if( this.indexOf(s) == 0 ) return true;
   		return false;
	}
	
	  sourceGitIgnore = new File(project.getProperty("gitignore.file.path"))
	
      // Access to Ant-Properties by their names
      dir = project.getProperty("scm-migration.work.folder") + "/git/" + project.getProperty("repository.name");

	  CVSROOTdir = new File(dir+"/CVSROOT");
	  if(CVSROOTdir.exists())
	  {
      	execRemoveCVSROOT = scmMigration.createTask("delete");
      	execRemoveCVSROOT.setDir(new File(CVSROOTdir));
      	execRemoveCVSROOT.execute();
      	execAddAll = scmMigration.createTask("exec");
      	execAddAll.setDir(new File(dir));
      	execAddAll.setExecutable("git");
      	execAddAll.createArg().setLine("add --all");
      	execAddAll.execute();
      	execCommit= scmMigration.createTask("exec");
      	execCommit.setDir(new File(dir));
      	execCommit.setExecutable("git");
      	execCommit.createArg().setLine("commit -m '[scm-migration] Remove CVSROOT'");
      	execCommit.execute();
	  }
	  
	  gitignorefile = new File(dir+"/.gitignore");

	  if(!gitignorefile.exists())
	  {
      	execCopyGitIgnore = scmMigration.createTask("copy");
      	execCopyGitIgnore.setFile(sourceGitIgnore);
      	execCopyGitIgnore.setTofile(gitignorefile);
      	execCopyGitIgnore.execute();
      	execAddAll = scmMigration.createTask("exec");
      	execAddAll.setDir(new File(dir));
      	execAddAll.setExecutable("git");
      	execAddAll.createArg().setLine("add --all");
      	execAddAll.execute();
      	execCommit= scmMigration.createTask("exec");
      	execCommit.setDir(new File(dir));
      	execCommit.setExecutable("git");
      	execCommit.createArg().setLine("commit -m '[scm-migration] Add .gitgnore file'");
      	execCommit.execute();
	  }
	  
	  execBranchesList = scmMigration.createTask("exec");
      execBranchesList.setDir(new File(dir));
      execBranchesList.setExecutable("git");
      execBranchesList.createArg().setLine("branch -a");
      execBranchesList.setOutputproperty("branches.list");
      execBranchesList.execute();
      var branchesList = project.getProperty("branches.list");
      self.setTaskName("scmMigration:svn2git");
      var branches = branchesList.split("\n");
	  var numLines = branches.length;
	  var i;
      var currentSection;
      var sections = Array();
      var phrases = Array();

      // parse phrases
      for (i = 0; i < numLines; i++) {
         var currentBranch = branches[i].trim();
         
         if(currentBranch.startsWith("remotes/scmMigration/"))
         {
            if(currentBranch.startsWith("remotes/scmMigration/tags"))
         	{
         		var tagName = currentBranch.substring(26);
			    execCheckoutTag = scmMigration.createTask("exec");
			    execCheckoutTag.setDir(new File(dir));
			    execCheckoutTag.setExecutable("git");
			    execCheckoutTag.createArg().setLine("checkout "+currentBranch);
			    execCheckoutTag.setTaskName("scm-migration:git-checkout");
			    execCheckoutTag.execute();
		 	  	gitignorefile = new File(dir+"/.gitignore");
			  	if(!gitignorefile.exists())
			  	{
			      	execCopyGitIgnore = scmMigration.createTask("copy");
			      	execCopyGitIgnore.setFile(sourceGitIgnore);
			      	execCopyGitIgnore.setTofile(gitignorefile);
			      	execCopyGitIgnore.execute();
			      	execAddAll = scmMigration.createTask("exec");
			      	execAddAll.setDir(new File(dir));
			      	execAddAll.setExecutable("git");
			      	execAddAll.createArg().setLine("add --all");
			      	execAddAll.execute();
			      	execCommit= scmMigration.createTask("exec");
			      	execCommit.setDir(new File(dir));
			      	execCommit.setExecutable("git");
			      	execCommit.createArg().setLine("commit -m '[scm-migration] ["+tagName+"] Add .gitgnore file'");
			      	execCommit.execute();
			  	}
			    execCreateTag = scmMigration.createTask("exec");
			    execCreateTag.setDir(new File(dir));
			    execCreateTag.setExecutable("git");
			    execCreateTag.createArg().setLine("tag -f "+tagName);
			    execCheckoutTag.setTaskName("scm-migration:git-tag");
			    execCreateTag.execute();
           	}
           	else
           	{
           		if("remotes/scmMigration/trunk" != currentBranch)
           		{
         			var branchName = currentBranch.substring(21);
				    execDeleteBranch = scmMigration.createTask("exec");
				    execDeleteBranch.setDir(new File(dir));
				    execDeleteBranch.setExecutable("git");
				    execDeleteBranch.createArg().setLine("branch -D "+branchName);
				    execDeleteBranch.setTaskName("scm-migration:git-delete-branch");
				    execDeleteBranch.execute();
				    execCheckoutBranch = scmMigration.createTask("exec");
				    execCheckoutBranch.setDir(new File(dir));
				    execCheckoutBranch.setExecutable("git");
				    execCheckoutBranch.createArg().setLine("checkout -b "+branchName + " " + currentBranch);
			   		execCheckoutBranch.setTaskName("scm-migration:git-checkout");
				    execCheckoutBranch.execute();
			 	  	gitignorefile = new File(dir+"/.gitignore");
				  	if(!gitignorefile.exists())
				  	{
				      	execCopyGitIgnore = scmMigration.createTask("copy");
				      	execCopyGitIgnore.setFile(sourceGitIgnore);
				      	execCopyGitIgnore.setTofile(gitignorefile);
				      	execCopyGitIgnore.execute();
				      	execAddAll = scmMigration.createTask("exec");
				      	execAddAll.setDir(new File(dir));
				      	execAddAll.setExecutable("git");
				      	execAddAll.createArg().setLine("add --all");
				      	execAddAll.execute();
				      	execCommit= scmMigration.createTask("exec");
				      	execCommit.setDir(new File(dir));
				      	execCommit.setExecutable("git");
				      	execCommit.createArg().setLine("commit -m '[scm-migration] ["+branchName+"] Add .gitgnore file'");
				      	execCommit.execute();
				  	}
           		}
           	}
         }
      }

    ]]>
 </script>
 
		<techo taskname="scm-migration" message="[end] git-prepare-for-push"/>
   	</target> 
   
   	<target name="scm-migration:git-push" if="push.to.remote">
    	<techo taskname="scm-migration" message="[start] git-push"/>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:set-remote"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="remote add origin ${git.remote.uri}"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:push-branches"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="push origin --all"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:push-tags"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="push origin --tags"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<techo taskname="scm-migration"  message="[end] git-push"/>
   	</target> 
   
   	<target name="scm-migration:aggressive-gc">
    	<techo taskname="scm-migration"  message="[start] aggressive git gc"/>
   	   	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:aggressive-gc"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="gc --aggressive"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<techo taskname="scm-migration"  message="[end] aggressive git gc"/>
   	</target>
   	
   	<!-- Preparation targets -->
   				
   	<target name="scm-migration:build-draft-svn-authors-file">
    	<techo taskname="scm-migration" message="[start] build draft SVN authors file"/>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2authors"/>
    	    <param name="run-command.executable" value="${basedir}/svn2authors.sh"/>
    	    <param name="run-command.command.line" value="${svn.repository.url} ${authors.file.path}"/>
    	    <param name="run-command.dir" value="${basedir}"/>
    	</antcall>
    	<techo taskname="scm-migration" message="[end] build draft SVN authors file"/>
  	</target>
    	
   	<target name="scm-migration:build-draft-cvs-authors-file">
    	<techo taskname="scm-migration" message="[start] build draft CVS authors file"/>

<script language="javascript"> <![CDATA[

      // import statements
      // importPackage(java.io);
      importClass(java.io.File);

	String.prototype.startsWith = function(s)
	{
   		if( this.indexOf(s) == 0 ) return true;
   		return false;
	}

      echoFileTask = scmMigration.createTask("echo");
      authorsFileTemplate = project.getProperty("authors.file.path");
      echoFileTask.setFile(new File(authorsFileTemplate));
      echoFileTask.setMessage("scm-migration = scm-migration <scm-migration>\n");
      echoFileTask.execute();
      
      echoFileTask.setAppend(true);
      // Access to Ant-Properties by their names
      passwdFile = project.getProperty("cvs.repository.root") + "/" + project.getProperty("repository.name") + "/CVSROOT/passwd";
      
      loadFileTask = scmMigration.createTask("loadfile");
      loadFileTask.setSrcFile(new File(passwdFile));
      loadFileTask.setProperty("passwdContent");
      loadFileTask.execute();
      var passwdList = project.getProperty("passwdContent");
      var lines = passwdList.split("\n");
	  var numLines = lines.length;
	  var i;
      var currentSection;
      var sections = Array();
      var phrases = Array();

      // parse phrases
      for (i = 0; i < numLines; i++) {
         var currentLine = lines[i].trim();
         currentUser = currentLine.substring(0,currentLine.indexOf(":")); 
	     echoFileTask.setMessage(currentUser+" = "+currentUser+" <"+currentUser+">\n");
	     echoFileTask.execute();
      }

    ]]>
 </script>
 
		<techo taskname="scm-migration" message="[end] build CVS draft authors file"/>
   	</target> 
   
</project>
