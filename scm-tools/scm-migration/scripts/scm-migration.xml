<project name="scmMigration">

    <!-- arguments definitions -->    

<!-- 
    Those properties should be passed to the script from outside (using -D) for the CVS2GIT migration. Here are example of values:
    <property name="cvs2svn.tool.folder" value="~/tools/cvs2svn-trunk"/>
    <property name="cvs.repository.root" value="~/scm/cvs/Repos"/>
    <property name="repository.name" value="OurProject"/>
    <property name="authors.file.path" value="~/info/authors-transform.txt"/>
    <property name="git.remote.uri" value="git@github.com:tikalk/tikal-alm-tools.git"/>
    <property name="temp.root.folder" value="/Users/Yoram/Documents/Projects/Earnix/temp"/>
    <property name="gitignore.file.path" value="${basedir}/../templates/Gitignore/empty.gitignore"/>
 -->
     
<!-- 
    Those properties should be passed to the script from outside (using -D) for the SVN2GIT migration. Here are example of values:
    <property name="repository.name" value="OurProject"/>
    <property name="authors.file.path" value="~/info/authors-transform.txt"/>
    <property name="git.remote.uri" value="git@github.com:tikalk/tikal-alm-tools.git"/>
    <property name="temp.root.folder" value="/Users/Yoram/Documents/Projects/Earnix/temp"/>
    <property name="gitignore.file.path" value="${basedir}/../templates/Gitignore/empty.gitignore"/>
 -->
     
    <!-- global definitions -->    

    <property name="cvs2svn.tool.path" value="${cvs2svn.tool.folder}/cvs2svn"/>
	<property name="scm-migration.work.folder" value="${temp.root.folder}/${repository.name}"/>

<scriptdef name="techo" language="javascript">
 <attribute name="message"/>

<![CDATA[
function getTimeStamp() {
    var now = new Date();
    return ((now.getDate()) + '/' +
             (now.getMonth() + 1) + '/' +
             now.getFullYear() + " " +
             now.getHours() + ':' +
             ((now.getMinutes() < 10)
                 ? ("0" + now.getMinutes())
                 : (now.getMinutes())) + ':' +
             ((now.getSeconds() < 10)
                 ? ("0" + now.getSeconds())
                 : (now.getSeconds())));
}
    tstamp = getTimeStamp();
    self.log(attributes.get("message") +" ["+tstamp+"]");
]]>
</scriptdef>
    
 	<!-- general targets -->    
    
   	<target name="scm-migration:general:run-command">
    	<techo taskname="scm-migration" message="[start] run command: ${run-command.executable} ${run-command.command.line}"/>
    	<exec taskname="${run-command.task-name}" executable="${run-command.executable}" dir="${run-command.dir}" failonerror="true">
    	    <arg line="${run-command.command.line}"/>
    	</exec>
    	<techo taskname="scm-migration" message="[end] run command"/>
   	</target> 
   	
	<!-- CVS2GIT migration targets -->
   
   	<target name="scm-migration:cvs2git:main">
    	<techo taskname="scm-migration" message="[start] main"/>
   	    <antcall target="scm-migration:cvs2git:validations"/>  
   	    <antcall target="scm-migration:cvs2git:init"/>  
    	<antcall target="scm-migration:cvs2svn"/>  
    	<antcall target="scm-migration:svn2git">
    	    <param name="svn.repository.url" value="file://${scm-migration.work.folder}/svn ${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>  
    	<antcall target="scm-migration:git-push-flow"/>  
    	<techo taskname="scm-migration" message="[end] main"/>
   	</target> 
   
   	<target name="scm-migration:cvs2git:validations">
    	<techo taskname="scm-migration"  message="[start] validations"/>
    	<fail message="Repository name (property name: repository.name) wasn't defined" unless="repository.name"/>
    	<fail message="Path to authors file (property name: authors.file.path) wasn't defined" unless="authors.file.path"/>
    	<fail message="Path to CVS root folder (property name: cvs.repository.root) wasn't defined" unless="cvs.repository.root"/>
    	<fail message="Remote GIT URL (property name: git.remote.uri) wasn't defined" unless="git.remote.uri"/>
    		
    	<condition property="cvs2svn.tool.path.exist">
    	    <available file="${cvs2svn.tool.path}"/>
    	</condition>
    	<fail message="cvs2svn command (${cvs2svn.tool.path}) not exists (maybe you should build it first?)" unless="cvs2svn.tool.path.exist"/>
    	<condition property="authors.file.path.exist">
    	    <available file="${authors.file.path}"/>
    	</condition>
    	<fail message="Authors file doesn't exists (${authors.file.path.exist})" unless="authors.file.path.exist"/>
    	<condition property="cvs.repository.root.exist">
    	    <available file="${cvs.repository.root}"/>
    	</condition>
    	<fail message="CVS repository root doesn't exists (${cvs.repository.root})" unless="cvs.repository.root.exist"/>
    	<condition property="temp.root.folder.exist">
    	    <available file="${temp.root.folder}"/>
    	</condition>
    	<fail message="Temporary working folder doesn't exists (${temp.root.folder})" unless="temp.root.folder.exist"/>
<!--      	<condition property="gitignore.file.path.exist">
    	    <available file="${gitignore.file.path}"/>
    	</condition>
    	<fail message="Template .gitignore file doesn't  exists (${gitignore.file.path})" unless="gitignore.file.path.exist"/> -->
 		<techo taskname="scm-migration" message="[end] validations"/>
   	</target> 

   	<target name="scm-migration:cvs2git:init">
    	<techo taskname="scm-migration" message="[start] init"/>
    	<delete dir="${scm-migration.work.folder}"/>
    	<mkdir dir="${scm-migration.work.folder}"/>
    	<techo taskname="scm-migration" message="[end] init"/>
   	</target> 
   
   	<target name="scm-migration:cvs2svn">
    	<techo taskname="scm-migration" message="[start] cvs2svn"/>
    	<property name="cvs2svn.command.arguments" value="--username=scm-migration --fallback-encoding=utf8 --svnrepos ${scm-migration.work.folder}/svn ${cvs.repository.root}/${repository.name}"/>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:cvs2svn"/>
    	    <param name="run-command.executable" value="${cvs2svn.tool.path}"/>
    	    <param name="run-command.command.line" value="${cvs2svn.command.arguments}"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}"/>
    	</antcall>
    	<techo taskname="scm-migration" message="[end] cvs2svn"/>
   	</target> 
   
   	<target name="scm-migration:svn2git">
    	<techo taskname="scm-migration" message="[start] svn2git"/>
    	<property name="svn2git.command.arguments" value="svn clone -s -q --no-metadata --prefix=scmMigration/ --no-follow-parent --authors-file=${authors.file.path} ${svn.repository.url}"/>
    	<mkdir dir="${scm-migration.work.folder}/git"/>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:svn2git"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="${svn2git.command.arguments}"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git"/>
    	</antcall>
    	<techo taskname="scm-migration" message="[end] svn2git"/>
   	</target>
   	
   	<!-- GIT push flow targets -->
   
   	<target name="scm-migration:git-push-flow">
   	    <antcall target="scm-migration:git-prepare-for-push"/>
   	    <antcall target="scm-migration:git-push"/>
   	</target> 
   
   	<target name="scm-migration:git-prepare-for-push">
    	<techo taskname="scm-migration" message="[start] git-prepare-for-push"/>

<script language="javascript"> <![CDATA[

      // import statements
      // importPackage(java.io);
      importClass(java.io.File);

	String.prototype.startsWith = function(s)
	{
   		if( this.indexOf(s) == 0 ) return true;
   		return false;
	}

      // Access to Ant-Properties by their names
      dir = project.getProperty("scm-migration.work.folder") + "/git/" + project.getProperty("repository.name");
      execBranchesList = scmMigration.createTask("exec");
      execBranchesList.setDir(new File(dir));
      execBranchesList.setExecutable("git");
      execBranchesList.createArg().setLine("branch -a");
      execBranchesList.setOutputproperty("branches.list");
      execBranchesList.execute();
      var branchesList = project.getProperty("branches.list");
      self.setTaskName("scmMigration:svn2git");
      var branches = branchesList.split("\n");
	  var numLines = branches.length;
	  var i;
      var currentSection;
      var sections = Array();
      var phrases = Array();

      // parse phrases
      for (i = 0; i < numLines; i++) {
         var currentBranch = branches[i].trim();
         
         if(currentBranch.startsWith("remotes/scmMigration/"))
         {
            if(currentBranch.startsWith("remotes/scmMigration/tags"))
         	{
         		var tagName = currentBranch.substring(26);
			    execCheckoutTag = scmMigration.createTask("exec");
			    execCheckoutTag.setDir(new File(dir));
			    execCheckoutTag.setExecutable("git");
			    execCheckoutTag.createArg().setLine("checkout "+currentBranch);
			    execCheckoutTag.setTaskName("scm-migration:git-checkout");
			    execCheckoutTag.execute();
			    execCreateTag = scmMigration.createTask("exec");
			    execCreateTag.setDir(new File(dir));
			    execCreateTag.setExecutable("git");
			    execCreateTag.createArg().setLine("tag "+tagName);
			    execCheckoutTag.setTaskName("scm-migration:git-tag");
			    execCreateTag.execute();
           	}
           	else
           	{
           		if("remotes/scmMigration/trunk" != currentBranch)
           		{
         			var branchName = currentBranch.substring(21);
				    execCheckoutBranch = scmMigration.createTask("exec");
				    execCheckoutBranch.setDir(new File(dir));
				    execCheckoutBranch.setExecutable("git");
				    execCheckoutBranch.createArg().setLine("checkout -b "+branchName + " " + currentBranch);
			   		execCheckoutBranch.setTaskName("scm-migration:git-checkout");
				    execCheckoutBranch.execute();
           		}
           	}
         }
      }

    ]]>
 </script>
 
		<techo taskname="scm-migration" message="[end] git-prepare-for-push"/>
   	</target> 
   
   	<target name="scm-migration:git-push">
    	<techo taskname="scm-migration" message="[start] git-push"/>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:set-remote"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="remote add origin ${git.remote.uri}"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:push-branches"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="push origin --all -v"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<antcall target="scm-migration:general:run-command">
    	    <param name="run-command.task-name" value="scm-migration:push-tags"/>
    	    <param name="run-command.executable" value="git"/>
    	    <param name="run-command.command.line" value="push origin --tags -v"/>
    	    <param name="run-command.dir" value="${scm-migration.work.folder}/git/${repository.name}"/>
    	</antcall>
    	<techo taskname="scm-migration"  message="[end] git-push"/>
   	</target> 
   				
   	<target name="scm-migration:build-draft-authors-file">
    	<techo taskname="scm-migration" message="[start] build draft authors file"/>

<script language="javascript"> <![CDATA[

      // import statements
      // importPackage(java.io);
      importClass(java.io.File);

	String.prototype.startsWith = function(s)
	{
   		if( this.indexOf(s) == 0 ) return true;
   		return false;
	}

      echoFileTask = scm-migration.createTask("echo");
      authorsFileTemplate = project.getProperty("authors.file.path");
      echoFileTask.setFile(new File(authorsFileTemplate));
      echoFileTask.setMessage("scm-migration = scm-migration <scm-migration>\n");
      echoFileTask.execute();
      
      echoFileTask.setAppend(true);
      // Access to Ant-Properties by their names
      passwdFile = project.getProperty("cvs.repository.root") + "/" + project.getProperty("repository.name") + "/CVSROOT/passwd";
      
      loadFileTask = scm-migration.createTask("loadfile");
      loadFileTask.setSrcFile(new File(passwdFile));
      loadFileTask.setProperty("passwdContent");
      loadFileTask.execute();
      var passwdList = project.getProperty("passwdContent");
      var lines = passwdList.split("\n");
	  var numLines = lines.length;
	  var i;
      var currentSection;
      var sections = Array();
      var phrases = Array();

      // parse phrases
      for (i = 0; i < numLines; i++) {
         var currentLine = lines[i].trim();
         currentUser = currentLine.substring(0,currentLine.indexOf(":")); 
	     echoFileTask.setMessage(currentUser+" = "+currentUser+" <"+currentUser+">\n");
	     echoFileTask.execute();
      }

    ]]>
 </script>
 
		<techo taskname="scm-migration" message="[end] build draft authors file"/>
   	</target> 
   
</project>
